<?php
/**
 * Etablissement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Sirene
 *
 * <p>Date de la dernière modification : 31 janvier 2019</p> <p>API Sirene donne accès aux informations concernant les entreprises et les établissements immatriculés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées. La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées. Les services actuellement disponibles interrogent les unités légales (Siren) et les établissements (Siret). À venir : prédécesseurs et successeurs d'un établissement et données pluriannuelles. <h4 class=\"add-margin-top-5x\">Licence</h4> <p>La réutilisation des jeux de données mis à votre disposition à partir de la base Sirene est soumise à la licence « <a href=\"https://www.etalab.gouv.fr/licence-ouverte-open-licence\" target=\"_blank\">Licence Ouverte / Open Licence version 2.0</a> » conçue par Etalab, organisme chargé de coordonner l’action des services de l’État et de ses établissements publics pour faciliter la réutilisation la plus large possible de leurs informations publiques, via le portail interministériel <a href=\"https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/\" title=\"data.gouv.fr\" target=\"_blank\" class=\"external-link\">data.gouv.fr</a></p> <p>La base Sirene contenant des données à caractère personnel, l’Insee attire votre attention sur les obligations légales qui en découlent :</p> <ul> <li>Le traitement de ces données relève des obligations de déclaration de la Loi 78-17 du 6 janvier 1978 modifiée, dite Loi Informatique et Libertés : <a href=\"http://www.legifrance.gouv.fr/affichTexte.do?cidTexte=JORFTEXT000000886460\" title=\"Nouvelle fenêtre : la loi 78-17 du 6 janvier 1978 sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">Loi 78-17</a></li> <li>Selon votre usage du jeu de données, il est de votre responsabilité de tenir compte du statut de diffusion le plus récent de chaque personne physique.</li> </ul> <p>En effet, selon l’<a href=\"http://www.legifrance.gouv.fr/affichCodeArticle.do;jsessionid=C505A51DBC1A4EB1FFF3764C69ACDB1C.tpdjo11v_1?idArticle=LEGIARTI000020165030&cidTexte=LEGITEXT000005634379&dateTexte=20100702\" title=\"Nouvelle fenêtre : l’article A123-96 du code de commerce sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">Article A123-96 du code de commerce</a> :</p> <p>\"Toute personne physique peut demander soit directement lors de ses formalités de création ou de modification, soit par lettre adressée au directeur général de l’Institut national de la statistique et des études économiques, que les informations du répertoire la concernant ne puissent être utilisées par des tiers autres que les organismes habilités au titre de l’<a href=\"https://www.legifrance.gouv.fr/affichCodeArticle.do?cidTexte=LEGITEXT000005634379&idArticle=LEGIARTI000006258837&dateTexte=&categorieLien=cid\" title=\"article R. 123-224\" target=\"_blank\" class=\"external-link\">article R. 123-224</a> ou les administrations, à des fins de prospection, notamment commerciale.\"</p> <h4 class=\"add-margin-top-5x\">Limites d'utilisation</h4> <p>L'usage d'API Sirene est soumis à une limite de 30 interrogations par minute.</p> <p>L'Insee se réserve le droit de changer cette limite en cas de nécessité.</p> <h4 class=\"add-margin-top-5x\">Droit de rectification des données du répertoire Sirene</h4> <p>L'<a href=\"https://www.legifrance.gouv.fr/affichCodeArticle.do?idArticle=LEGIARTI000020165042&cidTexte=LEGITEXT000005634379&dateTexte=20151223\" title=\"Nouvelle fenêtre : l’article A123-90 du code de commerce sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">article A123-90 du code de commerce</a> indique que \"Le droit d'accès prévu par l'article 39 de la loi du 6 janvier 1978 s'exerce auprès du directeur régional de l'Institut national de la statistique et des études économiques.\"</p> <h4 class=\"add-margin-top-5x\">Homologation provisoire RGS (Référentiel général de sécurité)</h4> <p>Le directeur général de l’Insee, après avoir recueilli l’avis des membres de la commission d’homologation de sécurité, atteste que le système \"API Sirene\" est protégé, conformément aux objectifs fixés par le maître d’ouvrage, pour répondre, de manière proportionnée, aux besoins de protection du système et des informations, face aux risques identifiés.</p> <p>Paris le 22 Juin 2018</p> <p>Pour le directeur général de l’Insee</p> <p>Par délégation</p> <p>Le secrétaire général de l’Insee</p>
 *
 * OpenAPI spec version: 3.6.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Etablissement Class Doc Comment
 *
 * @category Class
 * @description Objet représentant un établissement et son historique
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Etablissement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Etablissement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'score' => 'float',
        'siren' => 'string',
        'nic' => 'string',
        'siret' => 'string',
        'statut_diffusion_etablissement' => 'string',
        'date_creation_etablissement' => 'string',
        'tranche_effectifs_etablissement' => 'string',
        'annee_effectifs_etablissement' => 'string',
        'activite_principale_registre_metiers_etablissement' => 'string',
        'date_dernier_traitement_etablissement' => 'string',
        'etablissement_siege' => 'bool',
        'nombre_periodes_etablissement' => 'int',
        'unite_legale' => '\Swagger\Client\Model\UniteLegaleEtablissement',
        'adresse_etablissement' => '\Swagger\Client\Model\Adresse',
        'adresse2_etablissement' => '\Swagger\Client\Model\AdresseComplementaire',
        'periodes_etablissement' => '\Swagger\Client\Model\PeriodeEtablissement[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'score' => 'float',
        'siren' => null,
        'nic' => null,
        'siret' => null,
        'statut_diffusion_etablissement' => null,
        'date_creation_etablissement' => null,
        'tranche_effectifs_etablissement' => null,
        'annee_effectifs_etablissement' => null,
        'activite_principale_registre_metiers_etablissement' => null,
        'date_dernier_traitement_etablissement' => null,
        'etablissement_siege' => null,
        'nombre_periodes_etablissement' => 'int32',
        'unite_legale' => null,
        'adresse_etablissement' => null,
        'adresse2_etablissement' => null,
        'periodes_etablissement' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'score' => 'score',
        'siren' => 'siren',
        'nic' => 'nic',
        'siret' => 'siret',
        'statut_diffusion_etablissement' => 'statutDiffusionEtablissement',
        'date_creation_etablissement' => 'dateCreationEtablissement',
        'tranche_effectifs_etablissement' => 'trancheEffectifsEtablissement',
        'annee_effectifs_etablissement' => 'anneeEffectifsEtablissement',
        'activite_principale_registre_metiers_etablissement' => 'activitePrincipaleRegistreMetiersEtablissement',
        'date_dernier_traitement_etablissement' => 'dateDernierTraitementEtablissement',
        'etablissement_siege' => 'etablissementSiege',
        'nombre_periodes_etablissement' => 'nombrePeriodesEtablissement',
        'unite_legale' => 'uniteLegale',
        'adresse_etablissement' => 'adresseEtablissement',
        'adresse2_etablissement' => 'adresse2Etablissement',
        'periodes_etablissement' => 'periodesEtablissement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'score' => 'setScore',
        'siren' => 'setSiren',
        'nic' => 'setNic',
        'siret' => 'setSiret',
        'statut_diffusion_etablissement' => 'setStatutDiffusionEtablissement',
        'date_creation_etablissement' => 'setDateCreationEtablissement',
        'tranche_effectifs_etablissement' => 'setTrancheEffectifsEtablissement',
        'annee_effectifs_etablissement' => 'setAnneeEffectifsEtablissement',
        'activite_principale_registre_metiers_etablissement' => 'setActivitePrincipaleRegistreMetiersEtablissement',
        'date_dernier_traitement_etablissement' => 'setDateDernierTraitementEtablissement',
        'etablissement_siege' => 'setEtablissementSiege',
        'nombre_periodes_etablissement' => 'setNombrePeriodesEtablissement',
        'unite_legale' => 'setUniteLegale',
        'adresse_etablissement' => 'setAdresseEtablissement',
        'adresse2_etablissement' => 'setAdresse2Etablissement',
        'periodes_etablissement' => 'setPeriodesEtablissement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'score' => 'getScore',
        'siren' => 'getSiren',
        'nic' => 'getNic',
        'siret' => 'getSiret',
        'statut_diffusion_etablissement' => 'getStatutDiffusionEtablissement',
        'date_creation_etablissement' => 'getDateCreationEtablissement',
        'tranche_effectifs_etablissement' => 'getTrancheEffectifsEtablissement',
        'annee_effectifs_etablissement' => 'getAnneeEffectifsEtablissement',
        'activite_principale_registre_metiers_etablissement' => 'getActivitePrincipaleRegistreMetiersEtablissement',
        'date_dernier_traitement_etablissement' => 'getDateDernierTraitementEtablissement',
        'etablissement_siege' => 'getEtablissementSiege',
        'nombre_periodes_etablissement' => 'getNombrePeriodesEtablissement',
        'unite_legale' => 'getUniteLegale',
        'adresse_etablissement' => 'getAdresseEtablissement',
        'adresse2_etablissement' => 'getAdresse2Etablissement',
        'periodes_etablissement' => 'getPeriodesEtablissement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['siren'] = isset($data['siren']) ? $data['siren'] : null;
        $this->container['nic'] = isset($data['nic']) ? $data['nic'] : null;
        $this->container['siret'] = isset($data['siret']) ? $data['siret'] : null;
        $this->container['statut_diffusion_etablissement'] = isset($data['statut_diffusion_etablissement']) ? $data['statut_diffusion_etablissement'] : null;
        $this->container['date_creation_etablissement'] = isset($data['date_creation_etablissement']) ? $data['date_creation_etablissement'] : null;
        $this->container['tranche_effectifs_etablissement'] = isset($data['tranche_effectifs_etablissement']) ? $data['tranche_effectifs_etablissement'] : null;
        $this->container['annee_effectifs_etablissement'] = isset($data['annee_effectifs_etablissement']) ? $data['annee_effectifs_etablissement'] : null;
        $this->container['activite_principale_registre_metiers_etablissement'] = isset($data['activite_principale_registre_metiers_etablissement']) ? $data['activite_principale_registre_metiers_etablissement'] : null;
        $this->container['date_dernier_traitement_etablissement'] = isset($data['date_dernier_traitement_etablissement']) ? $data['date_dernier_traitement_etablissement'] : null;
        $this->container['etablissement_siege'] = isset($data['etablissement_siege']) ? $data['etablissement_siege'] : null;
        $this->container['nombre_periodes_etablissement'] = isset($data['nombre_periodes_etablissement']) ? $data['nombre_periodes_etablissement'] : null;
        $this->container['unite_legale'] = isset($data['unite_legale']) ? $data['unite_legale'] : null;
        $this->container['adresse_etablissement'] = isset($data['adresse_etablissement']) ? $data['adresse_etablissement'] : null;
        $this->container['adresse2_etablissement'] = isset($data['adresse2_etablissement']) ? $data['adresse2_etablissement'] : null;
        $this->container['periodes_etablissement'] = isset($data['periodes_etablissement']) ? $data['periodes_etablissement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets score
     *
     * @return float
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float $score Score de l'élément parmi l'ensemble des éléments répondant à la requête, plus le score est élevé, plus l'élément est haut placé. Le score n'a pas de signification en dehors de la requête et n'est pas comparable aux score d'autres requêtes
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets siren
     *
     * @return string
     */
    public function getSiren()
    {
        return $this->container['siren'];
    }

    /**
     * Sets siren
     *
     * @param string $siren Numéro Siren de l'entreprise à laquelle appartient l'établissement
     *
     * @return $this
     */
    public function setSiren($siren)
    {
        $this->container['siren'] = $siren;

        return $this;
    }

    /**
     * Gets nic
     *
     * @return string
     */
    public function getNic()
    {
        return $this->container['nic'];
    }

    /**
     * Sets nic
     *
     * @param string $nic Numéro interne de classement de l'établissement
     *
     * @return $this
     */
    public function setNic($nic)
    {
        $this->container['nic'] = $nic;

        return $this;
    }

    /**
     * Gets siret
     *
     * @return string
     */
    public function getSiret()
    {
        return $this->container['siret'];
    }

    /**
     * Sets siret
     *
     * @param string $siret Numéro Siret de l’établissement (toujours renseigné)
     *
     * @return $this
     */
    public function setSiret($siret)
    {
        $this->container['siret'] = $siret;

        return $this;
    }

    /**
     * Gets statut_diffusion_etablissement
     *
     * @return string
     */
    public function getStatutDiffusionEtablissement()
    {
        return $this->container['statut_diffusion_etablissement'];
    }

    /**
     * Sets statut_diffusion_etablissement
     *
     * @param string $statut_diffusion_etablissement Statut de diffusion de l'établissement
     *
     * @return $this
     */
    public function setStatutDiffusionEtablissement($statut_diffusion_etablissement)
    {
        $this->container['statut_diffusion_etablissement'] = $statut_diffusion_etablissement;

        return $this;
    }

    /**
     * Gets date_creation_etablissement
     *
     * @return string
     */
    public function getDateCreationEtablissement()
    {
        return $this->container['date_creation_etablissement'];
    }

    /**
     * Sets date_creation_etablissement
     *
     * @param string $date_creation_etablissement Date de création de l'établissement, format AAAA-MM-JJ
     *
     * @return $this
     */
    public function setDateCreationEtablissement($date_creation_etablissement)
    {
        $this->container['date_creation_etablissement'] = $date_creation_etablissement;

        return $this;
    }

    /**
     * Gets tranche_effectifs_etablissement
     *
     * @return string
     */
    public function getTrancheEffectifsEtablissement()
    {
        return $this->container['tranche_effectifs_etablissement'];
    }

    /**
     * Sets tranche_effectifs_etablissement
     *
     * @param string $tranche_effectifs_etablissement Tranche d’effectif salarié de l’établissement, valorisée uniquement si l’année correspondante est supérieure ou égale à l’année d’interrogation -3 (sinon, NN)
     *
     * @return $this
     */
    public function setTrancheEffectifsEtablissement($tranche_effectifs_etablissement)
    {
        $this->container['tranche_effectifs_etablissement'] = $tranche_effectifs_etablissement;

        return $this;
    }

    /**
     * Gets annee_effectifs_etablissement
     *
     * @return string
     */
    public function getAnneeEffectifsEtablissement()
    {
        return $this->container['annee_effectifs_etablissement'];
    }

    /**
     * Sets annee_effectifs_etablissement
     *
     * @param string $annee_effectifs_etablissement Année de la tranche d’effectif salarié de l’établissement, valorisée uniquement si l'année est supérieure ou égale à l’année d’interrogation -3 (sinon, null)
     *
     * @return $this
     */
    public function setAnneeEffectifsEtablissement($annee_effectifs_etablissement)
    {
        $this->container['annee_effectifs_etablissement'] = $annee_effectifs_etablissement;

        return $this;
    }

    /**
     * Gets activite_principale_registre_metiers_etablissement
     *
     * @return string
     */
    public function getActivitePrincipaleRegistreMetiersEtablissement()
    {
        return $this->container['activite_principale_registre_metiers_etablissement'];
    }

    /**
     * Sets activite_principale_registre_metiers_etablissement
     *
     * @param string $activite_principale_registre_metiers_etablissement Code de l’activité exercée par l’artisan inscrit au registre des métiers. L’APRM est codifiée selon la nomenclature d’Activités Française de l’Artisanat (NAFA)
     *
     * @return $this
     */
    public function setActivitePrincipaleRegistreMetiersEtablissement($activite_principale_registre_metiers_etablissement)
    {
        $this->container['activite_principale_registre_metiers_etablissement'] = $activite_principale_registre_metiers_etablissement;

        return $this;
    }

    /**
     * Gets date_dernier_traitement_etablissement
     *
     * @return string
     */
    public function getDateDernierTraitementEtablissement()
    {
        return $this->container['date_dernier_traitement_etablissement'];
    }

    /**
     * Sets date_dernier_traitement_etablissement
     *
     * @param string $date_dernier_traitement_etablissement Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS)
     *
     * @return $this
     */
    public function setDateDernierTraitementEtablissement($date_dernier_traitement_etablissement)
    {
        $this->container['date_dernier_traitement_etablissement'] = $date_dernier_traitement_etablissement;

        return $this;
    }

    /**
     * Gets etablissement_siege
     *
     * @return bool
     */
    public function getEtablissementSiege()
    {
        return $this->container['etablissement_siege'];
    }

    /**
     * Sets etablissement_siege
     *
     * @param bool $etablissement_siege Indicatrice précisant si le Siret est celui de l’établissement siège ou non
     *
     * @return $this
     */
    public function setEtablissementSiege($etablissement_siege)
    {
        $this->container['etablissement_siege'] = $etablissement_siege;

        return $this;
    }

    /**
     * Gets nombre_periodes_etablissement
     *
     * @return int
     */
    public function getNombrePeriodesEtablissement()
    {
        return $this->container['nombre_periodes_etablissement'];
    }

    /**
     * Sets nombre_periodes_etablissement
     *
     * @param int $nombre_periodes_etablissement Nombre de périodes dans la vie de l'établissement
     *
     * @return $this
     */
    public function setNombrePeriodesEtablissement($nombre_periodes_etablissement)
    {
        $this->container['nombre_periodes_etablissement'] = $nombre_periodes_etablissement;

        return $this;
    }

    /**
     * Gets unite_legale
     *
     * @return \Swagger\Client\Model\UniteLegaleEtablissement
     */
    public function getUniteLegale()
    {
        return $this->container['unite_legale'];
    }

    /**
     * Sets unite_legale
     *
     * @param \Swagger\Client\Model\UniteLegaleEtablissement $unite_legale unite_legale
     *
     * @return $this
     */
    public function setUniteLegale($unite_legale)
    {
        $this->container['unite_legale'] = $unite_legale;

        return $this;
    }

    /**
     * Gets adresse_etablissement
     *
     * @return \Swagger\Client\Model\Adresse
     */
    public function getAdresseEtablissement()
    {
        return $this->container['adresse_etablissement'];
    }

    /**
     * Sets adresse_etablissement
     *
     * @param \Swagger\Client\Model\Adresse $adresse_etablissement adresse_etablissement
     *
     * @return $this
     */
    public function setAdresseEtablissement($adresse_etablissement)
    {
        $this->container['adresse_etablissement'] = $adresse_etablissement;

        return $this;
    }

    /**
     * Gets adresse2_etablissement
     *
     * @return \Swagger\Client\Model\AdresseComplementaire
     */
    public function getAdresse2Etablissement()
    {
        return $this->container['adresse2_etablissement'];
    }

    /**
     * Sets adresse2_etablissement
     *
     * @param \Swagger\Client\Model\AdresseComplementaire $adresse2_etablissement adresse2_etablissement
     *
     * @return $this
     */
    public function setAdresse2Etablissement($adresse2_etablissement)
    {
        $this->container['adresse2_etablissement'] = $adresse2_etablissement;

        return $this;
    }

    /**
     * Gets periodes_etablissement
     *
     * @return \Swagger\Client\Model\PeriodeEtablissement[]
     */
    public function getPeriodesEtablissement()
    {
        return $this->container['periodes_etablissement'];
    }

    /**
     * Sets periodes_etablissement
     *
     * @param \Swagger\Client\Model\PeriodeEtablissement[] $periodes_etablissement periodes_etablissement
     *
     * @return $this
     */
    public function setPeriodesEtablissement($periodes_etablissement)
    {
        $this->container['periodes_etablissement'] = $periodes_etablissement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


