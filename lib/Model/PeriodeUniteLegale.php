<?php
/**
 * PeriodeUniteLegale
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Sirene
 *
 * <p>Date de la dernière modification : 31 janvier 2019</p> <p>API Sirene donne accès aux informations concernant les entreprises et les établissements immatriculés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées. La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées. Les services actuellement disponibles interrogent les unités légales (Siren) et les établissements (Siret). À venir : prédécesseurs et successeurs d'un établissement et données pluriannuelles. <h4 class=\"add-margin-top-5x\">Licence</h4> <p>La réutilisation des jeux de données mis à votre disposition à partir de la base Sirene est soumise à la licence « <a href=\"https://www.etalab.gouv.fr/licence-ouverte-open-licence\" target=\"_blank\">Licence Ouverte / Open Licence version 2.0</a> » conçue par Etalab, organisme chargé de coordonner l’action des services de l’État et de ses établissements publics pour faciliter la réutilisation la plus large possible de leurs informations publiques, via le portail interministériel <a href=\"https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/\" title=\"data.gouv.fr\" target=\"_blank\" class=\"external-link\">data.gouv.fr</a></p> <p>La base Sirene contenant des données à caractère personnel, l’Insee attire votre attention sur les obligations légales qui en découlent :</p> <ul> <li>Le traitement de ces données relève des obligations de déclaration de la Loi 78-17 du 6 janvier 1978 modifiée, dite Loi Informatique et Libertés : <a href=\"http://www.legifrance.gouv.fr/affichTexte.do?cidTexte=JORFTEXT000000886460\" title=\"Nouvelle fenêtre : la loi 78-17 du 6 janvier 1978 sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">Loi 78-17</a></li> <li>Selon votre usage du jeu de données, il est de votre responsabilité de tenir compte du statut de diffusion le plus récent de chaque personne physique.</li> </ul> <p>En effet, selon l’<a href=\"http://www.legifrance.gouv.fr/affichCodeArticle.do;jsessionid=C505A51DBC1A4EB1FFF3764C69ACDB1C.tpdjo11v_1?idArticle=LEGIARTI000020165030&cidTexte=LEGITEXT000005634379&dateTexte=20100702\" title=\"Nouvelle fenêtre : l’article A123-96 du code de commerce sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">Article A123-96 du code de commerce</a> :</p> <p>\"Toute personne physique peut demander soit directement lors de ses formalités de création ou de modification, soit par lettre adressée au directeur général de l’Institut national de la statistique et des études économiques, que les informations du répertoire la concernant ne puissent être utilisées par des tiers autres que les organismes habilités au titre de l’<a href=\"https://www.legifrance.gouv.fr/affichCodeArticle.do?cidTexte=LEGITEXT000005634379&idArticle=LEGIARTI000006258837&dateTexte=&categorieLien=cid\" title=\"article R. 123-224\" target=\"_blank\" class=\"external-link\">article R. 123-224</a> ou les administrations, à des fins de prospection, notamment commerciale.\"</p> <h4 class=\"add-margin-top-5x\">Limites d'utilisation</h4> <p>L'usage d'API Sirene est soumis à une limite de 30 interrogations par minute.</p> <p>L'Insee se réserve le droit de changer cette limite en cas de nécessité.</p> <h4 class=\"add-margin-top-5x\">Droit de rectification des données du répertoire Sirene</h4> <p>L'<a href=\"https://www.legifrance.gouv.fr/affichCodeArticle.do?idArticle=LEGIARTI000020165042&cidTexte=LEGITEXT000005634379&dateTexte=20151223\" title=\"Nouvelle fenêtre : l’article A123-90 du code de commerce sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">article A123-90 du code de commerce</a> indique que \"Le droit d'accès prévu par l'article 39 de la loi du 6 janvier 1978 s'exerce auprès du directeur régional de l'Institut national de la statistique et des études économiques.\"</p> <h4 class=\"add-margin-top-5x\">Homologation provisoire RGS (Référentiel général de sécurité)</h4> <p>Le directeur général de l’Insee, après avoir recueilli l’avis des membres de la commission d’homologation de sécurité, atteste que le système \"API Sirene\" est protégé, conformément aux objectifs fixés par le maître d’ouvrage, pour répondre, de manière proportionnée, aux besoins de protection du système et des informations, face aux risques identifiés.</p> <p>Paris le 22 Juin 2018</p> <p>Pour le directeur général de l’Insee</p> <p>Par délégation</p> <p>Le secrétaire général de l’Insee</p>
 *
 * OpenAPI spec version: 3.6.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PeriodeUniteLegale Class Doc Comment
 *
 * @category Class
 * @description Ensemble des variables historisées de l&#39;unité légale entre dateDebut et dateFin
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PeriodeUniteLegale implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PeriodeUniteLegale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_fin' => '\DateTime',
        'date_debut' => '\DateTime',
        'etat_administratif_unite_legale' => 'string',
        'changement_etat_administratif_unite_legale' => 'bool',
        'nom_unite_legale' => 'string',
        'changement_nom_unite_legale' => 'bool',
        'nom_usage_unite_legale' => 'string',
        'changement_nom_usage_unite_legale' => 'bool',
        'denomination_unite_legale' => 'string',
        'changement_denomination_unite_legale' => 'bool',
        'denomination_usuelle1_unite_legale' => 'string',
        'denomination_usuelle2_unite_legale' => 'string',
        'denomination_usuelle3_unite_legale' => 'string',
        'changement_denomination_usuelle_unite_legale' => 'bool',
        'categorie_juridique_unite_legale' => 'string',
        'changement_categorie_juridique_unite_legale' => 'bool',
        'activite_principale_unite_legale' => 'string',
        'nomenclature_activite_principale_unite_legale' => 'string',
        'changement_activite_principale_unite_legale' => 'bool',
        'nic_siege_unite_legale' => 'string',
        'changement_nic_siege_unite_legale' => 'bool',
        'economie_sociale_solidaire_unite_legale' => 'string',
        'changement_economie_sociale_solidaire_unite_legale' => 'bool',
        'caractere_employeur_unite_legale' => 'string',
        'changement_caractere_employeur_unite_legale' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_fin' => 'date',
        'date_debut' => 'date',
        'etat_administratif_unite_legale' => null,
        'changement_etat_administratif_unite_legale' => null,
        'nom_unite_legale' => null,
        'changement_nom_unite_legale' => null,
        'nom_usage_unite_legale' => null,
        'changement_nom_usage_unite_legale' => null,
        'denomination_unite_legale' => null,
        'changement_denomination_unite_legale' => null,
        'denomination_usuelle1_unite_legale' => null,
        'denomination_usuelle2_unite_legale' => null,
        'denomination_usuelle3_unite_legale' => null,
        'changement_denomination_usuelle_unite_legale' => null,
        'categorie_juridique_unite_legale' => null,
        'changement_categorie_juridique_unite_legale' => null,
        'activite_principale_unite_legale' => null,
        'nomenclature_activite_principale_unite_legale' => null,
        'changement_activite_principale_unite_legale' => null,
        'nic_siege_unite_legale' => null,
        'changement_nic_siege_unite_legale' => null,
        'economie_sociale_solidaire_unite_legale' => null,
        'changement_economie_sociale_solidaire_unite_legale' => null,
        'caractere_employeur_unite_legale' => null,
        'changement_caractere_employeur_unite_legale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_fin' => 'dateFin',
        'date_debut' => 'dateDebut',
        'etat_administratif_unite_legale' => 'etatAdministratifUniteLegale',
        'changement_etat_administratif_unite_legale' => 'changementEtatAdministratifUniteLegale',
        'nom_unite_legale' => 'nomUniteLegale',
        'changement_nom_unite_legale' => 'changementNomUniteLegale',
        'nom_usage_unite_legale' => 'nomUsageUniteLegale',
        'changement_nom_usage_unite_legale' => 'changementNomUsageUniteLegale',
        'denomination_unite_legale' => 'denominationUniteLegale',
        'changement_denomination_unite_legale' => 'changementDenominationUniteLegale',
        'denomination_usuelle1_unite_legale' => 'denominationUsuelle1UniteLegale',
        'denomination_usuelle2_unite_legale' => 'denominationUsuelle2UniteLegale',
        'denomination_usuelle3_unite_legale' => 'denominationUsuelle3UniteLegale',
        'changement_denomination_usuelle_unite_legale' => 'changementDenominationUsuelleUniteLegale',
        'categorie_juridique_unite_legale' => 'categorieJuridiqueUniteLegale',
        'changement_categorie_juridique_unite_legale' => 'changementCategorieJuridiqueUniteLegale',
        'activite_principale_unite_legale' => 'activitePrincipaleUniteLegale',
        'nomenclature_activite_principale_unite_legale' => 'nomenclatureActivitePrincipaleUniteLegale',
        'changement_activite_principale_unite_legale' => 'changementActivitePrincipaleUniteLegale',
        'nic_siege_unite_legale' => 'nicSiegeUniteLegale',
        'changement_nic_siege_unite_legale' => 'changementNicSiegeUniteLegale',
        'economie_sociale_solidaire_unite_legale' => 'economieSocialeSolidaireUniteLegale',
        'changement_economie_sociale_solidaire_unite_legale' => 'changementEconomieSocialeSolidaireUniteLegale',
        'caractere_employeur_unite_legale' => 'caractereEmployeurUniteLegale',
        'changement_caractere_employeur_unite_legale' => 'changementCaractereEmployeurUniteLegale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_fin' => 'setDateFin',
        'date_debut' => 'setDateDebut',
        'etat_administratif_unite_legale' => 'setEtatAdministratifUniteLegale',
        'changement_etat_administratif_unite_legale' => 'setChangementEtatAdministratifUniteLegale',
        'nom_unite_legale' => 'setNomUniteLegale',
        'changement_nom_unite_legale' => 'setChangementNomUniteLegale',
        'nom_usage_unite_legale' => 'setNomUsageUniteLegale',
        'changement_nom_usage_unite_legale' => 'setChangementNomUsageUniteLegale',
        'denomination_unite_legale' => 'setDenominationUniteLegale',
        'changement_denomination_unite_legale' => 'setChangementDenominationUniteLegale',
        'denomination_usuelle1_unite_legale' => 'setDenominationUsuelle1UniteLegale',
        'denomination_usuelle2_unite_legale' => 'setDenominationUsuelle2UniteLegale',
        'denomination_usuelle3_unite_legale' => 'setDenominationUsuelle3UniteLegale',
        'changement_denomination_usuelle_unite_legale' => 'setChangementDenominationUsuelleUniteLegale',
        'categorie_juridique_unite_legale' => 'setCategorieJuridiqueUniteLegale',
        'changement_categorie_juridique_unite_legale' => 'setChangementCategorieJuridiqueUniteLegale',
        'activite_principale_unite_legale' => 'setActivitePrincipaleUniteLegale',
        'nomenclature_activite_principale_unite_legale' => 'setNomenclatureActivitePrincipaleUniteLegale',
        'changement_activite_principale_unite_legale' => 'setChangementActivitePrincipaleUniteLegale',
        'nic_siege_unite_legale' => 'setNicSiegeUniteLegale',
        'changement_nic_siege_unite_legale' => 'setChangementNicSiegeUniteLegale',
        'economie_sociale_solidaire_unite_legale' => 'setEconomieSocialeSolidaireUniteLegale',
        'changement_economie_sociale_solidaire_unite_legale' => 'setChangementEconomieSocialeSolidaireUniteLegale',
        'caractere_employeur_unite_legale' => 'setCaractereEmployeurUniteLegale',
        'changement_caractere_employeur_unite_legale' => 'setChangementCaractereEmployeurUniteLegale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_fin' => 'getDateFin',
        'date_debut' => 'getDateDebut',
        'etat_administratif_unite_legale' => 'getEtatAdministratifUniteLegale',
        'changement_etat_administratif_unite_legale' => 'getChangementEtatAdministratifUniteLegale',
        'nom_unite_legale' => 'getNomUniteLegale',
        'changement_nom_unite_legale' => 'getChangementNomUniteLegale',
        'nom_usage_unite_legale' => 'getNomUsageUniteLegale',
        'changement_nom_usage_unite_legale' => 'getChangementNomUsageUniteLegale',
        'denomination_unite_legale' => 'getDenominationUniteLegale',
        'changement_denomination_unite_legale' => 'getChangementDenominationUniteLegale',
        'denomination_usuelle1_unite_legale' => 'getDenominationUsuelle1UniteLegale',
        'denomination_usuelle2_unite_legale' => 'getDenominationUsuelle2UniteLegale',
        'denomination_usuelle3_unite_legale' => 'getDenominationUsuelle3UniteLegale',
        'changement_denomination_usuelle_unite_legale' => 'getChangementDenominationUsuelleUniteLegale',
        'categorie_juridique_unite_legale' => 'getCategorieJuridiqueUniteLegale',
        'changement_categorie_juridique_unite_legale' => 'getChangementCategorieJuridiqueUniteLegale',
        'activite_principale_unite_legale' => 'getActivitePrincipaleUniteLegale',
        'nomenclature_activite_principale_unite_legale' => 'getNomenclatureActivitePrincipaleUniteLegale',
        'changement_activite_principale_unite_legale' => 'getChangementActivitePrincipaleUniteLegale',
        'nic_siege_unite_legale' => 'getNicSiegeUniteLegale',
        'changement_nic_siege_unite_legale' => 'getChangementNicSiegeUniteLegale',
        'economie_sociale_solidaire_unite_legale' => 'getEconomieSocialeSolidaireUniteLegale',
        'changement_economie_sociale_solidaire_unite_legale' => 'getChangementEconomieSocialeSolidaireUniteLegale',
        'caractere_employeur_unite_legale' => 'getCaractereEmployeurUniteLegale',
        'changement_caractere_employeur_unite_legale' => 'getChangementCaractereEmployeurUniteLegale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ETAT_ADMINISTRATIF_UNITE_LEGALE_A = 'A';
    const ETAT_ADMINISTRATIF_UNITE_LEGALE_C = 'C';
    const NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAP = 'NAP';
    const NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAF_REV1 = 'NAFRev1';
    const NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAF_REV2 = 'NAFRev2';
    const NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAF1993 = 'NAF1993';
    const CARACTERE_EMPLOYEUR_UNITE_LEGALE_O = 'O';
    const CARACTERE_EMPLOYEUR_UNITE_LEGALE_N = 'N';
    const CARACTERE_EMPLOYEUR_UNITE_LEGALE_NULL = 'null';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEtatAdministratifUniteLegaleAllowableValues()
    {
        return [
            self::ETAT_ADMINISTRATIF_UNITE_LEGALE_A,
            self::ETAT_ADMINISTRATIF_UNITE_LEGALE_C,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNomenclatureActivitePrincipaleUniteLegaleAllowableValues()
    {
        return [
            self::NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAP,
            self::NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAF_REV1,
            self::NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAF_REV2,
            self::NOMENCLATURE_ACTIVITE_PRINCIPALE_UNITE_LEGALE_NAF1993,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCaractereEmployeurUniteLegaleAllowableValues()
    {
        return [
            self::CARACTERE_EMPLOYEUR_UNITE_LEGALE_O,
            self::CARACTERE_EMPLOYEUR_UNITE_LEGALE_N,
            self::CARACTERE_EMPLOYEUR_UNITE_LEGALE_NULL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_fin'] = isset($data['date_fin']) ? $data['date_fin'] : null;
        $this->container['date_debut'] = isset($data['date_debut']) ? $data['date_debut'] : null;
        $this->container['etat_administratif_unite_legale'] = isset($data['etat_administratif_unite_legale']) ? $data['etat_administratif_unite_legale'] : null;
        $this->container['changement_etat_administratif_unite_legale'] = isset($data['changement_etat_administratif_unite_legale']) ? $data['changement_etat_administratif_unite_legale'] : null;
        $this->container['nom_unite_legale'] = isset($data['nom_unite_legale']) ? $data['nom_unite_legale'] : null;
        $this->container['changement_nom_unite_legale'] = isset($data['changement_nom_unite_legale']) ? $data['changement_nom_unite_legale'] : null;
        $this->container['nom_usage_unite_legale'] = isset($data['nom_usage_unite_legale']) ? $data['nom_usage_unite_legale'] : null;
        $this->container['changement_nom_usage_unite_legale'] = isset($data['changement_nom_usage_unite_legale']) ? $data['changement_nom_usage_unite_legale'] : null;
        $this->container['denomination_unite_legale'] = isset($data['denomination_unite_legale']) ? $data['denomination_unite_legale'] : null;
        $this->container['changement_denomination_unite_legale'] = isset($data['changement_denomination_unite_legale']) ? $data['changement_denomination_unite_legale'] : null;
        $this->container['denomination_usuelle1_unite_legale'] = isset($data['denomination_usuelle1_unite_legale']) ? $data['denomination_usuelle1_unite_legale'] : null;
        $this->container['denomination_usuelle2_unite_legale'] = isset($data['denomination_usuelle2_unite_legale']) ? $data['denomination_usuelle2_unite_legale'] : null;
        $this->container['denomination_usuelle3_unite_legale'] = isset($data['denomination_usuelle3_unite_legale']) ? $data['denomination_usuelle3_unite_legale'] : null;
        $this->container['changement_denomination_usuelle_unite_legale'] = isset($data['changement_denomination_usuelle_unite_legale']) ? $data['changement_denomination_usuelle_unite_legale'] : null;
        $this->container['categorie_juridique_unite_legale'] = isset($data['categorie_juridique_unite_legale']) ? $data['categorie_juridique_unite_legale'] : null;
        $this->container['changement_categorie_juridique_unite_legale'] = isset($data['changement_categorie_juridique_unite_legale']) ? $data['changement_categorie_juridique_unite_legale'] : null;
        $this->container['activite_principale_unite_legale'] = isset($data['activite_principale_unite_legale']) ? $data['activite_principale_unite_legale'] : null;
        $this->container['nomenclature_activite_principale_unite_legale'] = isset($data['nomenclature_activite_principale_unite_legale']) ? $data['nomenclature_activite_principale_unite_legale'] : null;
        $this->container['changement_activite_principale_unite_legale'] = isset($data['changement_activite_principale_unite_legale']) ? $data['changement_activite_principale_unite_legale'] : null;
        $this->container['nic_siege_unite_legale'] = isset($data['nic_siege_unite_legale']) ? $data['nic_siege_unite_legale'] : null;
        $this->container['changement_nic_siege_unite_legale'] = isset($data['changement_nic_siege_unite_legale']) ? $data['changement_nic_siege_unite_legale'] : null;
        $this->container['economie_sociale_solidaire_unite_legale'] = isset($data['economie_sociale_solidaire_unite_legale']) ? $data['economie_sociale_solidaire_unite_legale'] : null;
        $this->container['changement_economie_sociale_solidaire_unite_legale'] = isset($data['changement_economie_sociale_solidaire_unite_legale']) ? $data['changement_economie_sociale_solidaire_unite_legale'] : null;
        $this->container['caractere_employeur_unite_legale'] = isset($data['caractere_employeur_unite_legale']) ? $data['caractere_employeur_unite_legale'] : null;
        $this->container['changement_caractere_employeur_unite_legale'] = isset($data['changement_caractere_employeur_unite_legale']) ? $data['changement_caractere_employeur_unite_legale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEtatAdministratifUniteLegaleAllowableValues();
        if (!is_null($this->container['etat_administratif_unite_legale']) && !in_array($this->container['etat_administratif_unite_legale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'etat_administratif_unite_legale', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNomenclatureActivitePrincipaleUniteLegaleAllowableValues();
        if (!is_null($this->container['nomenclature_activite_principale_unite_legale']) && !in_array($this->container['nomenclature_activite_principale_unite_legale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'nomenclature_activite_principale_unite_legale', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCaractereEmployeurUniteLegaleAllowableValues();
        if (!is_null($this->container['caractere_employeur_unite_legale']) && !in_array($this->container['caractere_employeur_unite_legale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'caractere_employeur_unite_legale', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_fin
     *
     * @return \DateTime
     */
    public function getDateFin()
    {
        return $this->container['date_fin'];
    }

    /**
     * Sets date_fin
     *
     * @param \DateTime $date_fin Date de fin de la période, null pour la dernière période, format AAAA-MM-DD
     *
     * @return $this
     */
    public function setDateFin($date_fin)
    {
        $this->container['date_fin'] = $date_fin;

        return $this;
    }

    /**
     * Gets date_debut
     *
     * @return \DateTime
     */
    public function getDateDebut()
    {
        return $this->container['date_debut'];
    }

    /**
     * Sets date_debut
     *
     * @param \DateTime $date_debut Date de début de la période, format AAAA-MM-DD
     *
     * @return $this
     */
    public function setDateDebut($date_debut)
    {
        $this->container['date_debut'] = $date_debut;

        return $this;
    }

    /**
     * Gets etat_administratif_unite_legale
     *
     * @return string
     */
    public function getEtatAdministratifUniteLegale()
    {
        return $this->container['etat_administratif_unite_legale'];
    }

    /**
     * Sets etat_administratif_unite_legale
     *
     * @param string $etat_administratif_unite_legale État de l'entreprise pendant la période (A= entreprise active, C= entreprise cessée)
     *
     * @return $this
     */
    public function setEtatAdministratifUniteLegale($etat_administratif_unite_legale)
    {
        $allowedValues = $this->getEtatAdministratifUniteLegaleAllowableValues();
        if (!is_null($etat_administratif_unite_legale) && !in_array($etat_administratif_unite_legale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'etat_administratif_unite_legale', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['etat_administratif_unite_legale'] = $etat_administratif_unite_legale;

        return $this;
    }

    /**
     * Gets changement_etat_administratif_unite_legale
     *
     * @return bool
     */
    public function getChangementEtatAdministratifUniteLegale()
    {
        return $this->container['changement_etat_administratif_unite_legale'];
    }

    /**
     * Sets changement_etat_administratif_unite_legale
     *
     * @param bool $changement_etat_administratif_unite_legale Indicatrice de changement d'état par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementEtatAdministratifUniteLegale($changement_etat_administratif_unite_legale)
    {
        $this->container['changement_etat_administratif_unite_legale'] = $changement_etat_administratif_unite_legale;

        return $this;
    }

    /**
     * Gets nom_unite_legale
     *
     * @return string
     */
    public function getNomUniteLegale()
    {
        return $this->container['nom_unite_legale'];
    }

    /**
     * Sets nom_unite_legale
     *
     * @param string $nom_unite_legale Nom de naissance pour les personnes physiques pour la période (null pour les personnes morales)
     *
     * @return $this
     */
    public function setNomUniteLegale($nom_unite_legale)
    {
        $this->container['nom_unite_legale'] = $nom_unite_legale;

        return $this;
    }

    /**
     * Gets changement_nom_unite_legale
     *
     * @return bool
     */
    public function getChangementNomUniteLegale()
    {
        return $this->container['changement_nom_unite_legale'];
    }

    /**
     * Sets changement_nom_unite_legale
     *
     * @param bool $changement_nom_unite_legale Indicatrice de changement du nom par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementNomUniteLegale($changement_nom_unite_legale)
    {
        $this->container['changement_nom_unite_legale'] = $changement_nom_unite_legale;

        return $this;
    }

    /**
     * Gets nom_usage_unite_legale
     *
     * @return string
     */
    public function getNomUsageUniteLegale()
    {
        return $this->container['nom_usage_unite_legale'];
    }

    /**
     * Sets nom_usage_unite_legale
     *
     * @param string $nom_usage_unite_legale Nom d’usage pour les personnes physiques si celui-ci existe, null pour les personnes morales
     *
     * @return $this
     */
    public function setNomUsageUniteLegale($nom_usage_unite_legale)
    {
        $this->container['nom_usage_unite_legale'] = $nom_usage_unite_legale;

        return $this;
    }

    /**
     * Gets changement_nom_usage_unite_legale
     *
     * @return bool
     */
    public function getChangementNomUsageUniteLegale()
    {
        return $this->container['changement_nom_usage_unite_legale'];
    }

    /**
     * Sets changement_nom_usage_unite_legale
     *
     * @param bool $changement_nom_usage_unite_legale Indicatrice de changement du nom d'usage par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementNomUsageUniteLegale($changement_nom_usage_unite_legale)
    {
        $this->container['changement_nom_usage_unite_legale'] = $changement_nom_usage_unite_legale;

        return $this;
    }

    /**
     * Gets denomination_unite_legale
     *
     * @return string
     */
    public function getDenominationUniteLegale()
    {
        return $this->container['denomination_unite_legale'];
    }

    /**
     * Sets denomination_unite_legale
     *
     * @param string $denomination_unite_legale Raison sociale (personnes morales)
     *
     * @return $this
     */
    public function setDenominationUniteLegale($denomination_unite_legale)
    {
        $this->container['denomination_unite_legale'] = $denomination_unite_legale;

        return $this;
    }

    /**
     * Gets changement_denomination_unite_legale
     *
     * @return bool
     */
    public function getChangementDenominationUniteLegale()
    {
        return $this->container['changement_denomination_unite_legale'];
    }

    /**
     * Sets changement_denomination_unite_legale
     *
     * @param bool $changement_denomination_unite_legale Indicatrice de changement de la dénomination par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementDenominationUniteLegale($changement_denomination_unite_legale)
    {
        $this->container['changement_denomination_unite_legale'] = $changement_denomination_unite_legale;

        return $this;
    }

    /**
     * Gets denomination_usuelle1_unite_legale
     *
     * @return string
     */
    public function getDenominationUsuelle1UniteLegale()
    {
        return $this->container['denomination_usuelle1_unite_legale'];
    }

    /**
     * Sets denomination_usuelle1_unite_legale
     *
     * @param string $denomination_usuelle1_unite_legale Premier nom sous lequel l’entreprise est connue du public
     *
     * @return $this
     */
    public function setDenominationUsuelle1UniteLegale($denomination_usuelle1_unite_legale)
    {
        $this->container['denomination_usuelle1_unite_legale'] = $denomination_usuelle1_unite_legale;

        return $this;
    }

    /**
     * Gets denomination_usuelle2_unite_legale
     *
     * @return string
     */
    public function getDenominationUsuelle2UniteLegale()
    {
        return $this->container['denomination_usuelle2_unite_legale'];
    }

    /**
     * Sets denomination_usuelle2_unite_legale
     *
     * @param string $denomination_usuelle2_unite_legale Deuxième nom sous lequel l’entreprise est connue du public
     *
     * @return $this
     */
    public function setDenominationUsuelle2UniteLegale($denomination_usuelle2_unite_legale)
    {
        $this->container['denomination_usuelle2_unite_legale'] = $denomination_usuelle2_unite_legale;

        return $this;
    }

    /**
     * Gets denomination_usuelle3_unite_legale
     *
     * @return string
     */
    public function getDenominationUsuelle3UniteLegale()
    {
        return $this->container['denomination_usuelle3_unite_legale'];
    }

    /**
     * Sets denomination_usuelle3_unite_legale
     *
     * @param string $denomination_usuelle3_unite_legale Troisième nom sous lequel l’entreprise est connue du public
     *
     * @return $this
     */
    public function setDenominationUsuelle3UniteLegale($denomination_usuelle3_unite_legale)
    {
        $this->container['denomination_usuelle3_unite_legale'] = $denomination_usuelle3_unite_legale;

        return $this;
    }

    /**
     * Gets changement_denomination_usuelle_unite_legale
     *
     * @return bool
     */
    public function getChangementDenominationUsuelleUniteLegale()
    {
        return $this->container['changement_denomination_usuelle_unite_legale'];
    }

    /**
     * Sets changement_denomination_usuelle_unite_legale
     *
     * @param bool $changement_denomination_usuelle_unite_legale Indicatrice de changement de la dénomination usuelle de l'unité légale par rapport à la période précédente (un seul indicateur pour les trois variables denominationUsuelle1UniteLegale, denominationUsuelle2UniteLegale et denominationUsuelle3UniteLegale)
     *
     * @return $this
     */
    public function setChangementDenominationUsuelleUniteLegale($changement_denomination_usuelle_unite_legale)
    {
        $this->container['changement_denomination_usuelle_unite_legale'] = $changement_denomination_usuelle_unite_legale;

        return $this;
    }

    /**
     * Gets categorie_juridique_unite_legale
     *
     * @return string
     */
    public function getCategorieJuridiqueUniteLegale()
    {
        return $this->container['categorie_juridique_unite_legale'];
    }

    /**
     * Sets categorie_juridique_unite_legale
     *
     * @param string $categorie_juridique_unite_legale Catégorie juridique de l'entreprise (variable Null pour les personnes physiques. (<a href='https://www.insee.fr/fr/information/2028129'>la nomenclature sur insee.fr</a>))
     *
     * @return $this
     */
    public function setCategorieJuridiqueUniteLegale($categorie_juridique_unite_legale)
    {
        $this->container['categorie_juridique_unite_legale'] = $categorie_juridique_unite_legale;

        return $this;
    }

    /**
     * Gets changement_categorie_juridique_unite_legale
     *
     * @return bool
     */
    public function getChangementCategorieJuridiqueUniteLegale()
    {
        return $this->container['changement_categorie_juridique_unite_legale'];
    }

    /**
     * Sets changement_categorie_juridique_unite_legale
     *
     * @param bool $changement_categorie_juridique_unite_legale Indicatrice de changement de la catégorie juridique par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementCategorieJuridiqueUniteLegale($changement_categorie_juridique_unite_legale)
    {
        $this->container['changement_categorie_juridique_unite_legale'] = $changement_categorie_juridique_unite_legale;

        return $this;
    }

    /**
     * Gets activite_principale_unite_legale
     *
     * @return string
     */
    public function getActivitePrincipaleUniteLegale()
    {
        return $this->container['activite_principale_unite_legale'];
    }

    /**
     * Sets activite_principale_unite_legale
     *
     * @param string $activite_principale_unite_legale Activité principale de l'entreprise pendant la période (l'APE est codifiée selon la <a href='https://www.insee.fr/fr/information/2406147'>nomenclature d'Activités Française (NAF)</a>
     *
     * @return $this
     */
    public function setActivitePrincipaleUniteLegale($activite_principale_unite_legale)
    {
        $this->container['activite_principale_unite_legale'] = $activite_principale_unite_legale;

        return $this;
    }

    /**
     * Gets nomenclature_activite_principale_unite_legale
     *
     * @return string
     */
    public function getNomenclatureActivitePrincipaleUniteLegale()
    {
        return $this->container['nomenclature_activite_principale_unite_legale'];
    }

    /**
     * Sets nomenclature_activite_principale_unite_legale
     *
     * @param string $nomenclature_activite_principale_unite_legale Nomenclature de l'activité, permet de savoir à partir de quelle nomenclature est codifiée ActivitePrincipale
     *
     * @return $this
     */
    public function setNomenclatureActivitePrincipaleUniteLegale($nomenclature_activite_principale_unite_legale)
    {
        $allowedValues = $this->getNomenclatureActivitePrincipaleUniteLegaleAllowableValues();
        if (!is_null($nomenclature_activite_principale_unite_legale) && !in_array($nomenclature_activite_principale_unite_legale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'nomenclature_activite_principale_unite_legale', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nomenclature_activite_principale_unite_legale'] = $nomenclature_activite_principale_unite_legale;

        return $this;
    }

    /**
     * Gets changement_activite_principale_unite_legale
     *
     * @return bool
     */
    public function getChangementActivitePrincipaleUniteLegale()
    {
        return $this->container['changement_activite_principale_unite_legale'];
    }

    /**
     * Sets changement_activite_principale_unite_legale
     *
     * @param bool $changement_activite_principale_unite_legale Indicatrice de changement de l'activité principale par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementActivitePrincipaleUniteLegale($changement_activite_principale_unite_legale)
    {
        $this->container['changement_activite_principale_unite_legale'] = $changement_activite_principale_unite_legale;

        return $this;
    }

    /**
     * Gets nic_siege_unite_legale
     *
     * @return string
     */
    public function getNicSiegeUniteLegale()
    {
        return $this->container['nic_siege_unite_legale'];
    }

    /**
     * Sets nic_siege_unite_legale
     *
     * @param string $nic_siege_unite_legale Identifiant du siège pour la période (le Siret du siège est obtenu en concaténant le numéro Siren et le Nic)
     *
     * @return $this
     */
    public function setNicSiegeUniteLegale($nic_siege_unite_legale)
    {
        $this->container['nic_siege_unite_legale'] = $nic_siege_unite_legale;

        return $this;
    }

    /**
     * Gets changement_nic_siege_unite_legale
     *
     * @return bool
     */
    public function getChangementNicSiegeUniteLegale()
    {
        return $this->container['changement_nic_siege_unite_legale'];
    }

    /**
     * Sets changement_nic_siege_unite_legale
     *
     * @param bool $changement_nic_siege_unite_legale Indicatrice de changement du NIC du siège par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementNicSiegeUniteLegale($changement_nic_siege_unite_legale)
    {
        $this->container['changement_nic_siege_unite_legale'] = $changement_nic_siege_unite_legale;

        return $this;
    }

    /**
     * Gets economie_sociale_solidaire_unite_legale
     *
     * @return string
     */
    public function getEconomieSocialeSolidaireUniteLegale()
    {
        return $this->container['economie_sociale_solidaire_unite_legale'];
    }

    /**
     * Sets economie_sociale_solidaire_unite_legale
     *
     * @param string $economie_sociale_solidaire_unite_legale Appartenance de l’unité légale au champ de l’économie sociale et solidaire (ESS)
     *
     * @return $this
     */
    public function setEconomieSocialeSolidaireUniteLegale($economie_sociale_solidaire_unite_legale)
    {
        $this->container['economie_sociale_solidaire_unite_legale'] = $economie_sociale_solidaire_unite_legale;

        return $this;
    }

    /**
     * Gets changement_economie_sociale_solidaire_unite_legale
     *
     * @return bool
     */
    public function getChangementEconomieSocialeSolidaireUniteLegale()
    {
        return $this->container['changement_economie_sociale_solidaire_unite_legale'];
    }

    /**
     * Sets changement_economie_sociale_solidaire_unite_legale
     *
     * @param bool $changement_economie_sociale_solidaire_unite_legale Indicatrice de changement de l'ESS par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementEconomieSocialeSolidaireUniteLegale($changement_economie_sociale_solidaire_unite_legale)
    {
        $this->container['changement_economie_sociale_solidaire_unite_legale'] = $changement_economie_sociale_solidaire_unite_legale;

        return $this;
    }

    /**
     * Gets caractere_employeur_unite_legale
     *
     * @return string
     */
    public function getCaractereEmployeurUniteLegale()
    {
        return $this->container['caractere_employeur_unite_legale'];
    }

    /**
     * Sets caractere_employeur_unite_legale
     *
     * @param string $caractere_employeur_unite_legale Caractère employeur de l'entreprise. Valeur courante=O si au moins l'un des établissements actifs de l'unité légale emploie des salariés
     *
     * @return $this
     */
    public function setCaractereEmployeurUniteLegale($caractere_employeur_unite_legale)
    {
        $allowedValues = $this->getCaractereEmployeurUniteLegaleAllowableValues();
        if (!is_null($caractere_employeur_unite_legale) && !in_array($caractere_employeur_unite_legale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'caractere_employeur_unite_legale', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['caractere_employeur_unite_legale'] = $caractere_employeur_unite_legale;

        return $this;
    }

    /**
     * Gets changement_caractere_employeur_unite_legale
     *
     * @return bool
     */
    public function getChangementCaractereEmployeurUniteLegale()
    {
        return $this->container['changement_caractere_employeur_unite_legale'];
    }

    /**
     * Sets changement_caractere_employeur_unite_legale
     *
     * @param bool $changement_caractere_employeur_unite_legale Indicatrice de changement du caractère employeur par rapport à la période précédente
     *
     * @return $this
     */
    public function setChangementCaractereEmployeurUniteLegale($changement_caractere_employeur_unite_legale)
    {
        $this->container['changement_caractere_employeur_unite_legale'] = $changement_caractere_employeur_unite_legale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


