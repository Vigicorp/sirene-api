<?php
/**
 * Adresse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Sirene
 *
 * <p>Date de la dernière modification : 31 janvier 2019</p> <p>API Sirene donne accès aux informations concernant les entreprises et les établissements immatriculés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées. La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées. Les services actuellement disponibles interrogent les unités légales (Siren) et les établissements (Siret). À venir : prédécesseurs et successeurs d'un établissement et données pluriannuelles. <h4 class=\"add-margin-top-5x\">Licence</h4> <p>La réutilisation des jeux de données mis à votre disposition à partir de la base Sirene est soumise à la licence « <a href=\"https://www.etalab.gouv.fr/licence-ouverte-open-licence\" target=\"_blank\">Licence Ouverte / Open Licence version 2.0</a> » conçue par Etalab, organisme chargé de coordonner l’action des services de l’État et de ses établissements publics pour faciliter la réutilisation la plus large possible de leurs informations publiques, via le portail interministériel <a href=\"https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/\" title=\"data.gouv.fr\" target=\"_blank\" class=\"external-link\">data.gouv.fr</a></p> <p>La base Sirene contenant des données à caractère personnel, l’Insee attire votre attention sur les obligations légales qui en découlent :</p> <ul> <li>Le traitement de ces données relève des obligations de déclaration de la Loi 78-17 du 6 janvier 1978 modifiée, dite Loi Informatique et Libertés : <a href=\"http://www.legifrance.gouv.fr/affichTexte.do?cidTexte=JORFTEXT000000886460\" title=\"Nouvelle fenêtre : la loi 78-17 du 6 janvier 1978 sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">Loi 78-17</a></li> <li>Selon votre usage du jeu de données, il est de votre responsabilité de tenir compte du statut de diffusion le plus récent de chaque personne physique.</li> </ul> <p>En effet, selon l’<a href=\"http://www.legifrance.gouv.fr/affichCodeArticle.do;jsessionid=C505A51DBC1A4EB1FFF3764C69ACDB1C.tpdjo11v_1?idArticle=LEGIARTI000020165030&cidTexte=LEGITEXT000005634379&dateTexte=20100702\" title=\"Nouvelle fenêtre : l’article A123-96 du code de commerce sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">Article A123-96 du code de commerce</a> :</p> <p>\"Toute personne physique peut demander soit directement lors de ses formalités de création ou de modification, soit par lettre adressée au directeur général de l’Institut national de la statistique et des études économiques, que les informations du répertoire la concernant ne puissent être utilisées par des tiers autres que les organismes habilités au titre de l’<a href=\"https://www.legifrance.gouv.fr/affichCodeArticle.do?cidTexte=LEGITEXT000005634379&idArticle=LEGIARTI000006258837&dateTexte=&categorieLien=cid\" title=\"article R. 123-224\" target=\"_blank\" class=\"external-link\">article R. 123-224</a> ou les administrations, à des fins de prospection, notamment commerciale.\"</p> <h4 class=\"add-margin-top-5x\">Limites d'utilisation</h4> <p>L'usage d'API Sirene est soumis à une limite de 30 interrogations par minute.</p> <p>L'Insee se réserve le droit de changer cette limite en cas de nécessité.</p> <h4 class=\"add-margin-top-5x\">Droit de rectification des données du répertoire Sirene</h4> <p>L'<a href=\"https://www.legifrance.gouv.fr/affichCodeArticle.do?idArticle=LEGIARTI000020165042&cidTexte=LEGITEXT000005634379&dateTexte=20151223\" title=\"Nouvelle fenêtre : l’article A123-90 du code de commerce sur legifrance.gouv.fr\" target=\"_blank\" class=\"external-link\">article A123-90 du code de commerce</a> indique que \"Le droit d'accès prévu par l'article 39 de la loi du 6 janvier 1978 s'exerce auprès du directeur régional de l'Institut national de la statistique et des études économiques.\"</p> <h4 class=\"add-margin-top-5x\">Homologation provisoire RGS (Référentiel général de sécurité)</h4> <p>Le directeur général de l’Insee, après avoir recueilli l’avis des membres de la commission d’homologation de sécurité, atteste que le système \"API Sirene\" est protégé, conformément aux objectifs fixés par le maître d’ouvrage, pour répondre, de manière proportionnée, aux besoins de protection du système et des informations, face aux risques identifiés.</p> <p>Paris le 22 Juin 2018</p> <p>Pour le directeur général de l’Insee</p> <p>Par délégation</p> <p>Le secrétaire général de l’Insee</p>
 *
 * OpenAPI spec version: 3.6.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sirene\Client\Model;

use \ArrayAccess;
use \Sirene\Client\ObjectSerializer;

/**
 * Adresse Class Doc Comment
 *
 * @category Class
 * @description Ensemble des variables d&#39;adresse d&#39;un établissement
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Adresse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Adresse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'complement_adresse_etablissement' => 'string',
        'numero_voie_etablissement' => 'string',
        'indice_repetition_etablissement' => 'string',
        'type_voie_etablissement' => 'string',
        'libelle_voie_etablissement' => 'string',
        'code_postal_etablissement' => 'string',
        'libelle_commune_etablissement' => 'string',
        'libelle_commune_etranger_etablissement' => 'string',
        'distribution_speciale_etablissement' => 'string',
        'code_commune_etablissement' => 'string',
        'code_cedex_etablissement' => 'string',
        'libelle_cedex_etablissement' => 'string',
        'code_pays_etranger_etablissement' => 'string',
        'libelle_pays_etranger_etablissement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'complement_adresse_etablissement' => null,
        'numero_voie_etablissement' => null,
        'indice_repetition_etablissement' => null,
        'type_voie_etablissement' => null,
        'libelle_voie_etablissement' => null,
        'code_postal_etablissement' => null,
        'libelle_commune_etablissement' => null,
        'libelle_commune_etranger_etablissement' => null,
        'distribution_speciale_etablissement' => null,
        'code_commune_etablissement' => null,
        'code_cedex_etablissement' => null,
        'libelle_cedex_etablissement' => null,
        'code_pays_etranger_etablissement' => null,
        'libelle_pays_etranger_etablissement' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'complement_adresse_etablissement' => 'complementAdresseEtablissement',
        'numero_voie_etablissement' => 'numeroVoieEtablissement',
        'indice_repetition_etablissement' => 'indiceRepetitionEtablissement',
        'type_voie_etablissement' => 'typeVoieEtablissement',
        'libelle_voie_etablissement' => 'libelleVoieEtablissement',
        'code_postal_etablissement' => 'codePostalEtablissement',
        'libelle_commune_etablissement' => 'libelleCommuneEtablissement',
        'libelle_commune_etranger_etablissement' => 'libelleCommuneEtrangerEtablissement',
        'distribution_speciale_etablissement' => 'distributionSpecialeEtablissement',
        'code_commune_etablissement' => 'codeCommuneEtablissement',
        'code_cedex_etablissement' => 'codeCedexEtablissement',
        'libelle_cedex_etablissement' => 'libelleCedexEtablissement',
        'code_pays_etranger_etablissement' => 'codePaysEtrangerEtablissement',
        'libelle_pays_etranger_etablissement' => 'libellePaysEtrangerEtablissement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'complement_adresse_etablissement' => 'setComplementAdresseEtablissement',
        'numero_voie_etablissement' => 'setNumeroVoieEtablissement',
        'indice_repetition_etablissement' => 'setIndiceRepetitionEtablissement',
        'type_voie_etablissement' => 'setTypeVoieEtablissement',
        'libelle_voie_etablissement' => 'setLibelleVoieEtablissement',
        'code_postal_etablissement' => 'setCodePostalEtablissement',
        'libelle_commune_etablissement' => 'setLibelleCommuneEtablissement',
        'libelle_commune_etranger_etablissement' => 'setLibelleCommuneEtrangerEtablissement',
        'distribution_speciale_etablissement' => 'setDistributionSpecialeEtablissement',
        'code_commune_etablissement' => 'setCodeCommuneEtablissement',
        'code_cedex_etablissement' => 'setCodeCedexEtablissement',
        'libelle_cedex_etablissement' => 'setLibelleCedexEtablissement',
        'code_pays_etranger_etablissement' => 'setCodePaysEtrangerEtablissement',
        'libelle_pays_etranger_etablissement' => 'setLibellePaysEtrangerEtablissement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'complement_adresse_etablissement' => 'getComplementAdresseEtablissement',
        'numero_voie_etablissement' => 'getNumeroVoieEtablissement',
        'indice_repetition_etablissement' => 'getIndiceRepetitionEtablissement',
        'type_voie_etablissement' => 'getTypeVoieEtablissement',
        'libelle_voie_etablissement' => 'getLibelleVoieEtablissement',
        'code_postal_etablissement' => 'getCodePostalEtablissement',
        'libelle_commune_etablissement' => 'getLibelleCommuneEtablissement',
        'libelle_commune_etranger_etablissement' => 'getLibelleCommuneEtrangerEtablissement',
        'distribution_speciale_etablissement' => 'getDistributionSpecialeEtablissement',
        'code_commune_etablissement' => 'getCodeCommuneEtablissement',
        'code_cedex_etablissement' => 'getCodeCedexEtablissement',
        'libelle_cedex_etablissement' => 'getLibelleCedexEtablissement',
        'code_pays_etranger_etablissement' => 'getCodePaysEtrangerEtablissement',
        'libelle_pays_etranger_etablissement' => 'getLibellePaysEtrangerEtablissement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['complement_adresse_etablissement'] = isset($data['complement_adresse_etablissement']) ? $data['complement_adresse_etablissement'] : null;
        $this->container['numero_voie_etablissement'] = isset($data['numero_voie_etablissement']) ? $data['numero_voie_etablissement'] : null;
        $this->container['indice_repetition_etablissement'] = isset($data['indice_repetition_etablissement']) ? $data['indice_repetition_etablissement'] : null;
        $this->container['type_voie_etablissement'] = isset($data['type_voie_etablissement']) ? $data['type_voie_etablissement'] : null;
        $this->container['libelle_voie_etablissement'] = isset($data['libelle_voie_etablissement']) ? $data['libelle_voie_etablissement'] : null;
        $this->container['code_postal_etablissement'] = isset($data['code_postal_etablissement']) ? $data['code_postal_etablissement'] : null;
        $this->container['libelle_commune_etablissement'] = isset($data['libelle_commune_etablissement']) ? $data['libelle_commune_etablissement'] : null;
        $this->container['libelle_commune_etranger_etablissement'] = isset($data['libelle_commune_etranger_etablissement']) ? $data['libelle_commune_etranger_etablissement'] : null;
        $this->container['distribution_speciale_etablissement'] = isset($data['distribution_speciale_etablissement']) ? $data['distribution_speciale_etablissement'] : null;
        $this->container['code_commune_etablissement'] = isset($data['code_commune_etablissement']) ? $data['code_commune_etablissement'] : null;
        $this->container['code_cedex_etablissement'] = isset($data['code_cedex_etablissement']) ? $data['code_cedex_etablissement'] : null;
        $this->container['libelle_cedex_etablissement'] = isset($data['libelle_cedex_etablissement']) ? $data['libelle_cedex_etablissement'] : null;
        $this->container['code_pays_etranger_etablissement'] = isset($data['code_pays_etranger_etablissement']) ? $data['code_pays_etranger_etablissement'] : null;
        $this->container['libelle_pays_etranger_etablissement'] = isset($data['libelle_pays_etranger_etablissement']) ? $data['libelle_pays_etranger_etablissement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets complement_adresse_etablissement
     *
     * @return string
     */
    public function getComplementAdresseEtablissement()
    {
        return $this->container['complement_adresse_etablissement'];
    }

    /**
     * Sets complement_adresse_etablissement
     *
     * @param string $complement_adresse_etablissement Complément d'adresse de l'établissement
     *
     * @return $this
     */
    public function setComplementAdresseEtablissement($complement_adresse_etablissement)
    {
        $this->container['complement_adresse_etablissement'] = $complement_adresse_etablissement;

        return $this;
    }

    /**
     * Gets numero_voie_etablissement
     *
     * @return string
     */
    public function getNumeroVoieEtablissement()
    {
        return $this->container['numero_voie_etablissement'];
    }

    /**
     * Sets numero_voie_etablissement
     *
     * @param string $numero_voie_etablissement Numéro dans la voie
     *
     * @return $this
     */
    public function setNumeroVoieEtablissement($numero_voie_etablissement)
    {
        $this->container['numero_voie_etablissement'] = $numero_voie_etablissement;

        return $this;
    }

    /**
     * Gets indice_repetition_etablissement
     *
     * @return string
     */
    public function getIndiceRepetitionEtablissement()
    {
        return $this->container['indice_repetition_etablissement'];
    }

    /**
     * Sets indice_repetition_etablissement
     *
     * @param string $indice_repetition_etablissement Indice de répétition dans la voie
     *
     * @return $this
     */
    public function setIndiceRepetitionEtablissement($indice_repetition_etablissement)
    {
        $this->container['indice_repetition_etablissement'] = $indice_repetition_etablissement;

        return $this;
    }

    /**
     * Gets type_voie_etablissement
     *
     * @return string
     */
    public function getTypeVoieEtablissement()
    {
        return $this->container['type_voie_etablissement'];
    }

    /**
     * Sets type_voie_etablissement
     *
     * @param string $type_voie_etablissement Type de la voie
     *
     * @return $this
     */
    public function setTypeVoieEtablissement($type_voie_etablissement)
    {
        $this->container['type_voie_etablissement'] = $type_voie_etablissement;

        return $this;
    }

    /**
     * Gets libelle_voie_etablissement
     *
     * @return string
     */
    public function getLibelleVoieEtablissement()
    {
        return $this->container['libelle_voie_etablissement'];
    }

    /**
     * Sets libelle_voie_etablissement
     *
     * @param string $libelle_voie_etablissement Libellé de la voie
     *
     * @return $this
     */
    public function setLibelleVoieEtablissement($libelle_voie_etablissement)
    {
        $this->container['libelle_voie_etablissement'] = $libelle_voie_etablissement;

        return $this;
    }

    /**
     * Gets code_postal_etablissement
     *
     * @return string
     */
    public function getCodePostalEtablissement()
    {
        return $this->container['code_postal_etablissement'];
    }

    /**
     * Sets code_postal_etablissement
     *
     * @param string $code_postal_etablissement Code postal
     *
     * @return $this
     */
    public function setCodePostalEtablissement($code_postal_etablissement)
    {
        $this->container['code_postal_etablissement'] = $code_postal_etablissement;

        return $this;
    }

    /**
     * Gets libelle_commune_etablissement
     *
     * @return string
     */
    public function getLibelleCommuneEtablissement()
    {
        return $this->container['libelle_commune_etablissement'];
    }

    /**
     * Sets libelle_commune_etablissement
     *
     * @param string $libelle_commune_etablissement Libellé de la commune pour les adresses en France
     *
     * @return $this
     */
    public function setLibelleCommuneEtablissement($libelle_commune_etablissement)
    {
        $this->container['libelle_commune_etablissement'] = $libelle_commune_etablissement;

        return $this;
    }

    /**
     * Gets libelle_commune_etranger_etablissement
     *
     * @return string
     */
    public function getLibelleCommuneEtrangerEtablissement()
    {
        return $this->container['libelle_commune_etranger_etablissement'];
    }

    /**
     * Sets libelle_commune_etranger_etablissement
     *
     * @param string $libelle_commune_etranger_etablissement Libellé complémentaire pour une adresse à l'étranger
     *
     * @return $this
     */
    public function setLibelleCommuneEtrangerEtablissement($libelle_commune_etranger_etablissement)
    {
        $this->container['libelle_commune_etranger_etablissement'] = $libelle_commune_etranger_etablissement;

        return $this;
    }

    /**
     * Gets distribution_speciale_etablissement
     *
     * @return string
     */
    public function getDistributionSpecialeEtablissement()
    {
        return $this->container['distribution_speciale_etablissement'];
    }

    /**
     * Sets distribution_speciale_etablissement
     *
     * @param string $distribution_speciale_etablissement Distribution spéciale (BP par ex)
     *
     * @return $this
     */
    public function setDistributionSpecialeEtablissement($distribution_speciale_etablissement)
    {
        $this->container['distribution_speciale_etablissement'] = $distribution_speciale_etablissement;

        return $this;
    }

    /**
     * Gets code_commune_etablissement
     *
     * @return string
     */
    public function getCodeCommuneEtablissement()
    {
        return $this->container['code_commune_etablissement'];
    }

    /**
     * Sets code_commune_etablissement
     *
     * @param string $code_commune_etablissement Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le <a href='https://www.insee.fr/fr/information/2028028'>code officiel géographique (COG)</a>)
     *
     * @return $this
     */
    public function setCodeCommuneEtablissement($code_commune_etablissement)
    {
        $this->container['code_commune_etablissement'] = $code_commune_etablissement;

        return $this;
    }

    /**
     * Gets code_cedex_etablissement
     *
     * @return string
     */
    public function getCodeCedexEtablissement()
    {
        return $this->container['code_cedex_etablissement'];
    }

    /**
     * Sets code_cedex_etablissement
     *
     * @param string $code_cedex_etablissement Numéro de Cedex
     *
     * @return $this
     */
    public function setCodeCedexEtablissement($code_cedex_etablissement)
    {
        $this->container['code_cedex_etablissement'] = $code_cedex_etablissement;

        return $this;
    }

    /**
     * Gets libelle_cedex_etablissement
     *
     * @return string
     */
    public function getLibelleCedexEtablissement()
    {
        return $this->container['libelle_cedex_etablissement'];
    }

    /**
     * Sets libelle_cedex_etablissement
     *
     * @param string $libelle_cedex_etablissement Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement)
     *
     * @return $this
     */
    public function setLibelleCedexEtablissement($libelle_cedex_etablissement)
    {
        $this->container['libelle_cedex_etablissement'] = $libelle_cedex_etablissement;

        return $this;
    }

    /**
     * Gets code_pays_etranger_etablissement
     *
     * @return string
     */
    public function getCodePaysEtrangerEtablissement()
    {
        return $this->container['code_pays_etranger_etablissement'];
    }

    /**
     * Sets code_pays_etranger_etablissement
     *
     * @param string $code_pays_etranger_etablissement Code pays pour les établissements situés à l’étranger
     *
     * @return $this
     */
    public function setCodePaysEtrangerEtablissement($code_pays_etranger_etablissement)
    {
        $this->container['code_pays_etranger_etablissement'] = $code_pays_etranger_etablissement;

        return $this;
    }

    /**
     * Gets libelle_pays_etranger_etablissement
     *
     * @return string
     */
    public function getLibellePaysEtrangerEtablissement()
    {
        return $this->container['libelle_pays_etranger_etablissement'];
    }

    /**
     * Sets libelle_pays_etranger_etablissement
     *
     * @param string $libelle_pays_etranger_etablissement Libellé du pays pour les adresses à l’étranger
     *
     * @return $this
     */
    public function setLibellePaysEtrangerEtablissement($libelle_pays_etranger_etablissement)
    {
        $this->container['libelle_pays_etranger_etablissement'] = $libelle_pays_etranger_etablissement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


